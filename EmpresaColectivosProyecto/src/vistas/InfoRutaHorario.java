/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vistas;
import entidades.Ruta;
import entidades.Horario;
import accesodatos.RutaData;
import accesodatos.HorarioData;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author pablo
 */
public class InfoRutaHorario extends javax.swing.JPanel {
    List<Ruta> listaRutas;
    List<Ruta> listaOrigen;
    List<Ruta> listaDestino;
    List<Horario> listaHRutas;
    List<Horario> listaHSalida;
    
    private RutaData rutData;
    private HorarioData hrData;
    private Ruta rutaActual = new Ruta();
    
    private DefaultTableModel modelo;
    private DefaultTableModel modelo2;

    /**
     * Creates new form infoRutaHorario
     */
    public InfoRutaHorario() {
        initComponents();
        this.rutData = new RutaData();
        this.hrData = new HorarioData();
        this.modelo = (DefaultTableModel) jTRutas.getModel();
        this.modelo2 = (DefaultTableModel) jTHorarios.getModel();
        jrbRutas.setSelected(true);
        jrbOrigen.setSelected(false);
        jrbDestino.setSelected(false);
        if(jrbRutas.isSelected()){
            List<Ruta> rutas = rutData.listaRutasDispo();
            for(Ruta r:rutas){
                modelo.addRow(new Object[]{r.getOrigen(),r.getDestino(),r.getDuracionEstimada()});
            }
        }
        cargarRutas();
        
    }
    
    private void cargarRutas(){
        listaRutas = rutData.listaRutasDispo();
        
        for(Ruta r: listaRutas){
            String rt = r.getOrigen() + " - " + r.getDestino();
            jcbRutas.addItem(rt);
            
        }
        
    }
    
    private void limpiarCamposRuta(){
        jtBRuta.setText("");
        jrbRutas.setSelected(false);
        jrbOrigen.setSelected(false);
        jrbDestino.setSelected(false);
        borrarFilasRuta();
        
    }
    
    private void limpiarCamposHorario(){
        jtHSalida.setText("");
        jcbRutas.removeAllItems();
        borrarFilasHorario();
    }
    
    private void borrarFilasRuta(){
         int filas=modelo.getRowCount()-1;
         for(int f=filas;f >= 0;f--){
             modelo.removeRow(f);
         }
    }
    private void borrarFilasHorario(){
         int filas=modelo2.getRowCount()-1;
         for(int f=filas;f >= 0;f--){
             modelo2.removeRow(f);
         }
    }
    
//    public void llenarTabla(){
//        String buscar = jtBRuta.getText().toLowerCase();
//        
//        borrarFilasRuta();
//        
//        for(Ruta r: listaRutas){
//            String origen = r.getOrigen().toLowerCase();
//            String destino = r.getDestino().toLowerCase();
//            
//            if (jrbRutas.isSelected() && (origen.contains(buscar) || destino.contains(buscar))) {
//                modelo.addRow(new Object[]{r.getOrigen(), r.getDestino(), r.getDuracionEstimada()});
//            } else if (jrbOrigen.isSelected() && origen.contains(buscar)) {
//                modelo.addRow(new Object[]{r.getOrigen(), r.getDestino(), r.getDuracionEstimada()});
//            } else if (jrbDestino.isSelected() && destino.contains(buscar)) {
//                modelo.addRow(new Object[]{r.getOrigen(), r.getDestino(), r.getDuracionEstimada()});
//            }
//            
//        }
//        
//    }
    
    public void cargaDeRutas(){
        borrarFilasRuta();
        String texto = jtBRuta.getText().toLowerCase();
       
        if (jrbOrigen.isSelected()) {
            List<Ruta> rutasOrigen = rutData.listaRutasOrigen(texto);
            if (!rutasOrigen.isEmpty()) {
                for (Ruta ro:rutasOrigen) {
                    modelo.addRow(new Object[]{ro.getOrigen(),ro.getDestino(),ro.getDuracionEstimada()});
                }
            }  
        }
        if (jrbDestino.isSelected()) {
            List<Ruta> rutasDestino = rutData.listaRutasDestino(texto);
            if (!rutasDestino.isEmpty()) {
                for(Ruta rd:rutasDestino){
                    modelo.addRow(new Object[]{rd.getOrigen(),rd.getDestino(),rd.getDuracionEstimada()});
                }
            }
        }
        if (jrbRutas.isSelected()) {
            List<Ruta> rutas = rutData.listaRutasDispo();
            for(Ruta r:rutas){
                modelo.addRow(new Object[]{r.getOrigen(),r.getDestino(),r.getDuracionEstimada()});
            }
        }
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtBRuta = new javax.swing.JTextField();
        jrbRutas = new javax.swing.JRadioButton();
        jrbOrigen = new javax.swing.JRadioButton();
        jrbDestino = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTRutas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jtHSalida = new javax.swing.JTextField();
        jcbRutas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTHorarios = new javax.swing.JTable();
        jbBuscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("RUTAS");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 134, -1));

        jtBRuta.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.gray), "Buscar Ruta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 12))); // NOI18N
        jtBRuta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtBRutaKeyReleased(evt);
            }
        });
        add(jtBRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 178, -1));

        jrbRutas.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jrbRutas.setText("Rutas");
        jrbRutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbRutasActionPerformed(evt);
            }
        });
        add(jrbRutas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 94, -1));

        jrbOrigen.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jrbOrigen.setText("Origen");
        jrbOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbOrigenActionPerformed(evt);
            }
        });
        add(jrbOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 94, -1));

        jrbDestino.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jrbDestino.setText("Destino");
        jrbDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDestinoActionPerformed(evt);
            }
        });
        add(jrbDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 94, -1));

        jTRutas.setBackground(new java.awt.Color(128, 185, 203));
        jTRutas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origen", "Destino", "Duracion"
            }
        ));
        jScrollPane3.setViewportView(jTRutas);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 400, 204));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel2.setText("HORARIOS");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        jtHSalida.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.gray), "Hora Salida", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 12))); // NOI18N
        jtHSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtHSalidaActionPerformed(evt);
            }
        });
        add(jtHSalida, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 180, 40));

        jcbRutas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.gray), "Rutas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 12))); // NOI18N
        jcbRutas.setCursor(new java.awt.Cursor(java.awt.Cursor.N_RESIZE_CURSOR));
        jcbRutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRutasActionPerformed(evt);
            }
        });
        add(jcbRutas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 210, 40));

        jTHorarios.setBackground(new java.awt.Color(128, 185, 203));
        jTHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ruta", "H. Salida", "H. Llegada"
            }
        ));
        jScrollPane1.setViewportView(jTHorarios);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 360, 400, 204));

        jbBuscar.setBackground(new java.awt.Color(128, 185, 203));
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.gray, java.awt.Color.gray));
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });
        add(jbBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 420, 76, -1));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Ingrese este formato HH:mm");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 180, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jtBRutaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtBRutaKeyReleased
        
    }//GEN-LAST:event_jtBRutaKeyReleased

    private void jrbOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbOrigenActionPerformed
        // TODO add your handling code here:
        
        jrbDestino.setSelected(false);
        jrbRutas.setSelected(false);
        if (jrbOrigen.isSelected()) {
            cargaDeRutas();
        }
    }//GEN-LAST:event_jrbOrigenActionPerformed

    private void jrbDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDestinoActionPerformed
        // TODO add your handling code here:
        
        jrbOrigen.setSelected(false);
        jrbRutas.setSelected(false);
        if (jrbDestino.isSelected()) {
            cargaDeRutas();
        }
        
    }//GEN-LAST:event_jrbDestinoActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        // TODO add your handling code here:
        borrarFilasHorario(); 
        if (jtHSalida.getText() != null) {
            if (validarHora(jtHSalida.getText())) {
                
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                String hSalida = jtHSalida.getText();
                LocalTime hora = LocalTime.parse(hSalida, formatter);
                this.listaHSalida = hrData.listaHorarioSalida(hora);
                

             
                for (Horario hr : listaHSalida) {
                    if (!listaHSalida.isEmpty()) {
                        
                        modelo2.addRow(new Object[]{hr.getRuta(), hr.getHoraSalida(), hr.getHoraLlegada()});
                    }
                }


            }else{
                JOptionPane.showMessageDialog(null,"Hora invalida");
            }
            
        }else{
            JOptionPane.showMessageDialog(null,"El campo está vacio");
        }
            
        
        
        
        
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jrbRutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbRutasActionPerformed
        
        jrbOrigen.setSelected(false);
        jrbDestino.setSelected(false);
        if(jrbRutas.isSelected()){
            cargaDeRutas();
        }
    }//GEN-LAST:event_jrbRutasActionPerformed

    private void jtHSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtHSalidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtHSalidaActionPerformed

    private void jcbRutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRutasActionPerformed
        borrarFilasHorario();
        String rutaSeleccionada = jcbRutas.getSelectedItem().toString();
        List<Ruta> rutas = rutData.listaRutasDispo();
        for (Ruta r:rutas){
            String ru = r.getOrigen() + " - " + r.getDestino();
            if (ru.equals(rutaSeleccionada)) {
                List<Horario> horarios = hrData.listaHorarioRutas(r);
                for(Horario h: horarios){
                    modelo2.addRow(new Object[]{h.getRuta(),h.getHoraSalida(),h.getHoraLlegada()});
                }
            }
        }
        
        
    }//GEN-LAST:event_jcbRutasActionPerformed
    
    private boolean validarHora(String string){
        Pattern patron = Pattern.compile("^(?:[01]\\d|2[0-3]):[0-5]\\d$");
        Matcher match = patron.matcher(string);
        return match.matches();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTHorarios;
    private javax.swing.JTable jTRutas;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JComboBox<String> jcbRutas;
    private javax.swing.JRadioButton jrbDestino;
    private javax.swing.JRadioButton jrbOrigen;
    private javax.swing.JRadioButton jrbRutas;
    private javax.swing.JTextField jtBRuta;
    private javax.swing.JTextField jtHSalida;
    // End of variables declaration//GEN-END:variables
}
